{
  "name": "MOE",
  "tagline": "MOE is an event-driven scheduler system for 8/16/32-bit MCUs. MOE means \"Minds Of Embedded system\", It’s also the name of my lovely baby daughter :)",
  "body": "# MOE   \r\n\r\n   ![LOGO](https://github.com/ianhom/MOE/blob/master/Documents/Pic/MOE_logo_V0_1e.png?raw=true)\r\n\r\n[English](https://github.com/ianhom/MOE/blob/master/README.md) \r\n## 简介\r\nMOE是一个用于8/16/32位MCU多任务事件驱动型的调度系统。特点如下：   \r\n\r\n | 描述     \r\n----------------- | ---------------------------------------------   \r\n**事件驱动** | 可变的事件队列长度，支持高优先级事件插队.   \r\n**软件定时器** | 实用的软件定时器功能，支持回调.   \r\n**消息机制** | 易用的消息API轻松实现任务间通讯，支持“To All”消息（低RAM消耗）.   \r\n**调试选项** | 灵活的调试选项，每个模块可设置不同的调试信息打印等级;易用的ASSERT.  \r\n**Protothread** | 应用模块支持Protothread的编写方式.\r\n   \r\n   \r\n更多讨论欢迎加入我们的QQ群：**475258651**\r\n\r\n## 如何使用\r\n- **步骤 1**: 将MOE移植到您的硬件上，并为其提供“系统毫秒时钟”及“需要时刻轮询的函数”，然后初始化并运行MOE.      \r\n- **步骤 2**: 创建您的TASK或使用已有的经过测试的TASK来实现你的应用功能.   \r\n- **步骤 3**: 在Project_Config.h文件中注册需要运行的TASK，并在该文件中进行其他相关配置.   \r\n- **步骤 4**: 运行，Enjoy.:tada:   \r\n\r\n## 特别感谢\r\n- :tada:**蔡嘉楠小姐**对MOE Logo的精心绘制。:tada:\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}